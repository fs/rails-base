#!/usr/bin/env ruby

require 'fileutils'

rails_root = File.expand_path('../../', __FILE__)

def check(key)
  cache_file = "tmp/.#{key}"
  if File.exists?(cache_file)
    old_version = File.read(cache_file)
  else
    old_version = nil
  end

  version = yield(old_version)
  File.open(cache_file, 'w') { |f| f.puts(version || 'cached') }
end

unless File.exists?(File.join(rails_root, 'config/database.yml'))
  puts 'Database configuration file is missing, installing...'
  FileUtils.cp(File.join(rails_root, 'config/database.yml.example'), File.join(rails_root, 'config/database.yml'))
end

unless File.exists?(File.join(rails_root, '.env'))
  puts 'DotEnv configuration file is missing, installing...'
  FileUtils.cp(File.join(rails_root, '.env.example'), File.join(rails_root, '.env'))
end

check(:bundler) do |old_version|
  break if old_version

  unless system('which bundle > /dev/null')
    puts 'Bundler missing, installing...'
    system('gem install bundler --no-ri --no-rdoc') || exit(1)
  end
end

check(:gemfile) do |old_version|
  # check both Gemfile and Gemfile.lock as there might be local changes that hasn't been bundled yet
  version = File.read('Gemfile') + File.read('Gemfile.lock')

  if version != old_version
    puts 'Gemfile changed, bundling...'
    system('bundle install --path vendor/bundle --binstubs --without production 1> /dev/null') || exit(1)
  end

  version
end

check(:schema) do |old_version|
  version = File.readlines('db/schema.rb').find { |line| line.include?('define(:version') }

  if version != old_version
   puts 'Schema changed, updating databases...'
   system('rake db:migrate db:test:prepare') || exit(1)
  end

  version
end

puts "Everything is up to date. Run foreman start and play with app."